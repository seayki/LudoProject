// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReqnrollBackend.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class LudoControllerFeature : object, Xunit.IClassFixture<LudoControllerFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "LudoController", "The controller for ludo functionality", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "LudoController.feature"
#line hidden
        
        public LudoControllerFeature(LudoControllerFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The game is started with 4 players on a standard board")]
        [Xunit.TraitAttribute("FeatureTitle", "LudoController")]
        [Xunit.TraitAttribute("Description", "The game is started with 4 players on a standard board")]
        public async System.Threading.Tasks.Task TheGameIsStartedWith4PlayersOnAStandardBoard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The game is started with 4 players on a standard board", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
 await testRunner.GivenAsync("I have 4 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
 await testRunner.AndAsync("The board size is 52", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
 await testRunner.AndAsync("The game backend is initialized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
 await testRunner.WhenAsync("I call the StartGame endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync("I should recieve a list of 4 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 11
 await testRunner.AndAsync("Each player should have pieces assigned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync("Each player should have a unique color and start tile", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The game is stared with 2 players on a small board")]
        [Xunit.TraitAttribute("FeatureTitle", "LudoController")]
        [Xunit.TraitAttribute("Description", "The game is stared with 2 players on a small board")]
        public async System.Threading.Tasks.Task TheGameIsStaredWith2PlayersOnASmallBoard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The game is stared with 2 players on a small board", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
 await testRunner.GivenAsync("I have 2 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
 await testRunner.AndAsync("The board size is 36", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync("The game backend is initialized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.WhenAsync("I call the StartGame endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
 await testRunner.ThenAsync("I should recieve a list of 2 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
 await testRunner.AndAsync("Each player should have pieces assigned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync("Each player should have a unique color and start tile", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player rolls the die and gets valid moves")]
        [Xunit.TraitAttribute("FeatureTitle", "LudoController")]
        [Xunit.TraitAttribute("Description", "Player rolls the die and gets valid moves")]
        public async System.Threading.Tasks.Task PlayerRollsTheDieAndGetsValidMoves()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Player rolls the die and gets valid moves", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
 await testRunner.GivenAsync("I have 4 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
 await testRunner.AndAsync("The board size is 52", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync("the dice should always roll 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync("The dice should first roll for player order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.AndAsync("The game backend is initialized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.AndAsync("The game has started", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
 await testRunner.AndAsync("First player has at least one piece that can be moved", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.WhenAsync("the player rolls the die", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.ThenAsync("the response should contain a dice roll of 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
    await testRunner.AndAsync("the response should contain a non-empty list of valid pieces", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
    await testRunner.AndAsync("canReroll should be \"false\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player rolls a 6 and is allowed to reroll")]
        [Xunit.TraitAttribute("FeatureTitle", "LudoController")]
        [Xunit.TraitAttribute("Description", "Player rolls a 6 and is allowed to reroll")]
        public async System.Threading.Tasks.Task PlayerRollsA6AndIsAllowedToReroll()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Player rolls a 6 and is allowed to reroll", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
  await testRunner.GivenAsync("I have 4 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
  await testRunner.AndAsync("The board size is 52", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
  await testRunner.AndAsync("the dice should always roll 6", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
  await testRunner.AndAsync("The dice should first roll for player order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
  await testRunner.AndAsync("The game backend is initialized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
  await testRunner.AndAsync("The game has started", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
  await testRunner.WhenAsync("the player rolls the die", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
  await testRunner.ThenAsync("the response should contain a dice roll of 6", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 45
  await testRunner.AndAsync("the response should contain a non-empty list of valid pieces", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
  await testRunner.AndAsync("canReroll should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player is allowed multiple attempts to roll a 6 to enter a piece")]
        [Xunit.TraitAttribute("FeatureTitle", "LudoController")]
        [Xunit.TraitAttribute("Description", "Player is allowed multiple attempts to roll a 6 to enter a piece")]
        public async System.Threading.Tasks.Task PlayerIsAllowedMultipleAttemptsToRollA6ToEnterAPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Player is allowed multiple attempts to roll a 6 to enter a piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 49
  await testRunner.GivenAsync("I have 4 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
  await testRunner.AndAsync("The board size is 52", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.AndAsync("The dice rolls are 2, 5, 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
  await testRunner.AndAsync("The dice should first roll for player order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
  await testRunner.AndAsync("The game backend is initialized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
  await testRunner.AndAsync("The game has started", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
  await testRunner.WhenAsync("the player rolls the die 3 times", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "roll",
                            "canReroll"});
                table1.AddRow(new string[] {
                            "2",
                            "true"});
                table1.AddRow(new string[] {
                            "5",
                            "true"});
                table1.AddRow(new string[] {
                            "3",
                            "false"});
#line 56
  await testRunner.ThenAsync("the responses should be:", ((string)(null)), table1, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player moves a valid piece and turn passes to the next player")]
        [Xunit.TraitAttribute("FeatureTitle", "LudoController")]
        [Xunit.TraitAttribute("Description", "Player moves a valid piece and turn passes to the next player")]
        public async System.Threading.Tasks.Task PlayerMovesAValidPieceAndTurnPassesToTheNextPlayer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Player moves a valid piece and turn passes to the next player", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 63
  await testRunner.GivenAsync("I have 4 players", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 64
  await testRunner.AndAsync("The board size is 52", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
  await testRunner.AndAsync("The dice rolls are 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
  await testRunner.AndAsync("The dice should first roll for player order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
  await testRunner.AndAsync("The game backend is initialized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
  await testRunner.AndAsync("The game has started", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
  await testRunner.AndAsync("Current player has a piece on the board at position 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
  await testRunner.WhenAsync("the player rolls the die", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
  await testRunner.AndAsync("the player moves the first valid piece", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
  await testRunner.ThenAsync("the response should contain updated piece states", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
  await testRunner.AndAsync("the response should include the next player\'s ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await LudoControllerFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await LudoControllerFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
